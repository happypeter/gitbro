[work flow]
## Normal Editing
one thing I've been doing is to commit first and then view my patch for this commit with gitk
this is really stupid, if I made some mistake I need to "git reset ..." to reverse.
the right way shall be:

	1. do the modification
	2. git diff
	3. git commit 
## branching and merging
the normal work flow:
[one file trace]
git-annotate(1) and git-blame
[git]
## git reset --hard HEAD 

I just did some really big and stupid modification to some files(these files need to be in index already), then I diecide to go back and throw away all the modification.
	
	git reset --hard HEAD

works fine. but if you have new file that are not in index, you can not remove it by doing this.

today I stupidly did a

        git reset --hard last_commit

and lost all my modification, I think there is a way back, but I do not know how

but the right way to revert a stupid commit is this:

        git reset --mixed last_commit
        # do your modifiacation, may be delete some junk you addicdently
        # commited
        git commit -a -C ORIG_HEAD
        #then you get all the info in last commit you did.

## merge git-reader into gitbro is possiable

git can actully merge two branches, even they share no same files and history
(thus no conflicts)
so there are two things I can do:

1.	merge gitbro:website in to master(git merge website)
2.	merge git-reader:master into gitbro:master(do a fetch and merge, or just a pull)

I may not do this but it is really happy to know it can be done.
and maybe I will merge kdocs into edocs someday.
